services:
  uptimepinger.server:
    image: ${DOCKER_REGISTRY-}uptimepingerserver
    container_name: uptimepinger-server
    build:
      context: ./UptimePinger.Server
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - uptimepinger.db
      - uptimepinger.seq
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    networks:
      - backend-net

  uptimepinger.db:
    image: postgres:17
    container_name: uptimepinger-db
    restart: always
    secrets:
      - pg_user
      - pg_password
    environment:
      POSTGRES_USER: /run/secrets/pg_user.txt
      POSTGRES_PASSWORD: /run/secrets/pg_password.txt
      POSTGRES_DB: UptimePinger
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  uptimepinger.seq:
    image: datalust/seq:latest
    container_name: uptimepinger-seq
    secrets:
      - seq_admin_password
    environment:
      ACCEPT_EULA: Y
      SEQ_FIRSTRUN_ADMINPASSWORD: /run/secrets/seq_admin_password.txt
    ports:
      - "5341:80" 
      - "5342:5342" 
    volumes:
      - seqdata:/data
    networks:
      - backend-net

  uptimepinger.client:
    container_name: uptimepinger-client
    build:
      context: ./uptimepinger.client
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_HTTPS_PORT: 8081
    ports:
      - "54300:80"
      - "4659:4659"
    depends_on:
      - uptimepinger.server
    networks:
      - backend-net

volumes:
  pgdata:
  seqdata:

networks:
  backend-net:
  
secrets:
    pg_user:
        file: ./secrets/pg_user.txt
    pg_password:
        file: ./secrets/pg_password.txt
    seq_admin_password:
        file: ./secrets/seq_admin_password.txt